"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const adminRepository_1 = __importDefault(require("../repository/adminRepository"));
const AdminUseCase_1 = __importDefault(require("../../useCase/AdminUseCase"));
const adminController_1 = __importDefault(require("../../controller/adminController"));
const JwtToken_1 = __importDefault(require("../services/JwtToken"));
const hashPassword_1 = __importDefault(require("../services/hashPassword"));
const AdminAuth_1 = __importDefault(require("../middleware/AdminAuth"));
const courseRepository_1 = __importDefault(require("../repository/courseRepository"));
const CourseUseCase_1 = __importDefault(require("../../useCase/CourseUseCase"));
const courseController_1 = __importDefault(require("../../controller/courseController"));
const Cloudinary_1 = __importDefault(require("../services/Cloudinary"));
const router = express_1.default.Router();
const jwt = new JwtToken_1.default();
const hashed = new hashPassword_1.default();
const cloud = new Cloudinary_1.default();
const repository = new adminRepository_1.default();
const adminCase = new AdminUseCase_1.default(repository, jwt, hashed);
const controller = new adminController_1.default(adminCase);
const courseRepo = new courseRepository_1.default();
const courseuseCase = new CourseUseCase_1.default(courseRepo, cloud);
const CourseController = new courseController_1.default(courseuseCase);
router.post('/adminSignup', (req, res) => controller.SignUpAdmin(req, res));
router.post('/adminlogin', (req, res) => controller.AdminLogin(req, res));
router.post('/addcategory', AdminAuth_1.default, (req, res) => controller.categoryadd(req, res));
router.get('/category', AdminAuth_1.default, (req, res) => controller.showCategory(req, res));
router.get('/editcategory/:id', AdminAuth_1.default, (req, res) => controller.editCategoryDisplay(req, res));
router.put('/updatecategory/:id', AdminAuth_1.default, (req, res) => controller.editcategory(req, res));
router.get('/deletecategory/:id', AdminAuth_1.default, (req, res) => controller.deleteCategory(req, res));
router.get('/users', AdminAuth_1.default, (req, res) => controller.user(req, res));
router.get('/course', (req, res) => controller.Courses(req, res));
router.get('/trainers', AdminAuth_1.default, (req, res) => controller.Trainers(req, res));
router.put('/blockuser/:id', AdminAuth_1.default, (req, res) => controller.blockUser(req, res));
router.put('/unblockuser/:id', AdminAuth_1.default, (req, res) => controller.unblockUser(req, res));
router.put('/verifytrainer/:id', AdminAuth_1.default, (req, res) => controller.verifyTrainer(req, res));
router.put('/unverifytrainer/:id', AdminAuth_1.default, (req, res) => controller.unVerifyTrainer(req, res));
router.put('/verifycourse/:id', AdminAuth_1.default, (req, res) => controller.verifyCourse(req, res));
router.put('/unverifycourse/:id', AdminAuth_1.default, (req, res) => controller.unverifyCourse(req, res));
router.post('/adminlogout', AdminAuth_1.default, (req, res) => controller.adminLogout(req, res));
//course
router.get('/totalcount', (req, res) => CourseController.TotalCount(req, res));
router.get('/courseanalysis', (req, res) => CourseController.courseAnalysis(req, res));
router.get('/useranalysis', (req, res) => CourseController.userAnalysis(req, res));
router.get('/orderanalysis', (req, res) => CourseController.orderAnalysis(req, res));
exports.default = router;
